{"hash":"3abed4817c87332b7256cc04f5102649b2af0839","data":{"tag":{"title":".Net","belongsTo":{"edges":[{"node":{"title":"Entity Framework quick start","path":"/entity-framework-quick-start/","date":"13. September 2011","timeToRead":3,"description":"Microsoft’s Entity Framework has been around a while, but with it’s latest incarnation it is really shaping up nicely. I’ve been enjoying the ‘code first’ approach in version 4.1 of the framework. This allows you start your application design from POCOs, allowing the framework to infer the database design for you.","content":"<p>Microsoft’s Entity Framework has been around a while, but with it’s latest incarnation it is really shaping up nicely. I’ve been enjoying the ‘code first’ approach in version 4.1 of the framework. This allows you start your application design from POCOs, allowing the framework to infer the database design for you. For example, take the following Member entity model:</p>\n<pre class=\"language-text\"><code class=\"language-text\">class Member\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}</code></pre>\n<p>The following class derives from the DbContext base class, and exposes our Member model:</p>\n<pre class=\"language-text\"><code class=\"language-text\">class EFDbContext : DbContext\n{\n    public DbSet&lt;Member&gt; Members { get; set; }\n\n    public EFDbContext()\n    {\n        Database.SetInitializer&lt;EFDbContext&gt;(new DbContextInitializer());\n    }\n}</code></pre>\n<p>Note the <strong>SetInitializer</strong> call in the constructor. This allows us to seed the database with some data, using the following class:</p>\n<pre class=\"language-text\"><code class=\"language-text\">class DbContextInitializer : DropCreateDatabaseIfModelChanges&lt;EFDbContext&gt;\n{\n    protected override void Seed(EFDbContext Context)\n    {\n        new List&lt;Member&gt;\n        {\n            new Member {\n                FirstName = &quot;Andrew&quot;,\n                LastName = &quot;Rowland&quot;\n            },\n            new Member {\n                FirstName = &quot;Roland&quot;,\n                LastName = &quot;Browning&quot;\n            },\n        }.ForEach(m =&gt; Context.Members.Add(m));\n        \n        base.Seed(Context);\n    }\n}</code></pre>\n<p>Now we need a simple repository class, so we can query the database:</p>\n<pre class=\"language-text\"><code class=\"language-text\">class MemberRepository\n{\n    private EFDbContext Context = new EFDbContext();\n\n    public IQueryable&lt;Member&gt; Members\n    {\n        get { return Context.Members; }\n    }\n}</code></pre>\n<p>Standard practice is to use an interface, and obtain this concrete class using an IOC container, but it will do for demonstration purposes.</p>\n<p>Due to lazy loading, nothing would happen until we actually run a query. So finally, a console application to instantiate the repository, and display the data:</p>\n<pre class=\"language-text\"><code class=\"language-text\">class ConsoleApplication\n{\n    static void Main(string[] args)\n    {\n        MemberRepository Repository = new MemberRepository();\n\n        Repository.Members.ToList().ForEach(m =&gt; Console.WriteLine(String.Format(&quot;Member: {0} {1}&quot;, m.FirstName, m.LastName)));\n\n        Console.ReadKey();\n    }\n}</code></pre>\n<p>We can place all of the code into one console application. Install EF4.1, create a console application in Visual Studio 2010, paste in the class below. You may have to set the startup object in the project properties.</p>\n<pre class=\"language-text\"><code class=\"language-text\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Data.Entity;\n\nnamespace EFExample\n{\n    class Member\n    {\n        public int Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n\n    class EFDbContext : DbContext\n    {\n        public DbSet&lt;Member&gt; Members { get; set; }\n\n        public EFDbContext()\n        {\n            Database.SetInitializer&lt;EFDbContext&gt;(new DbContextInitializer());\n        }\n    }\n\n    class DbContextInitializer : DropCreateDatabaseIfModelChanges&lt;EFDbContext&gt;\n    {\n        protected override void Seed(EFDbContext Context)\n        {\n            new List&lt;Member&gt;\n            {\n                new Member {\n                    FirstName = &quot;Andrew&quot;,\n                    LastName = &quot;Rowland&quot;\n                },\n                new Member {\n                    FirstName = &quot;Roland&quot;,\n                    LastName = &quot;Browning&quot;\n                },\n            }.ForEach(m =&gt; Context.Members.Add(m));\n            \n            base.Seed(Context);\n        }\n    }\n\n    class MemberRepository\n    {\n        private EFDbContext Context = new EFDbContext();\n\n        public IQueryable&lt;Member&gt; Members\n        {\n            get { return Context.Members; }\n        }\n    }\n\n    class ConsoleApplication\n    {\n        static void Main(string[] args)\n        {\n            MemberRepository Repository = new MemberRepository();\n\n            Repository.Members.ToList().ForEach(m =&gt; Console.WriteLine(String.Format(&quot;Member: {0} {1}&quot;, m.FirstName, m.LastName)));\n\n            Console.ReadKey();\n        }\n    }\n}</code></pre>\n<p>Run the application, and the magic begins. If you have an instance of SQL Server Express running, a database with a single Members table will be created, populated with data, and the results displayed.</p>\n<p>Bit of a quick post this one, so feel free to ask a question. I’m not certain I’ve added enough detail.</p>\n"}},{"node":{"title":"W3C validation of ASP.Net output","path":"/w3-c-validation-of-asp-net-output/","date":"25. July 2009","timeToRead":1,"description":"A while ago I had to make certain that a CMS driven site built in .Net met some validation criteria. Specifically the XHTML markup. Running it by the W3C validator service, the markup always failed.","content":"<p>A while ago I had to make certain that a CMS driven site built in .Net met some validation criteria. Specifically the XHTML markup. Running it by the <a href=\"https://validator.w3.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C validator service</a>, the markup always failed.</p>\n<p>I fixed the obvious within the <strong>web.config</strong>. For example, the following is needed to force the application to render XHTML:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;configuration&gt;\n    ...\n    &lt;system.web&gt;\n        ...\n        &lt;xhtmlConformance mode=&quot;Strict&quot; /&gt;\n        ...\n    &lt;/system.web&gt;\n    ...\n&lt;/configuration&gt;</code></pre>\n<p>If I painfully cut and pasted the HTML into the Validatorâ€™s form field, it passed. The problem is, is that the service is not recognised by the Web server, and so a helper file in the application is required.</p>\n<p>In your web root, create a App_Browsers directory. Within this directory create a file called w3c.browser. Paste the following contents into the file:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;browsers&gt;\n    &lt;browser id=&quot;W3C_Validator&quot; parentID=&quot;default&quot;&gt;\n        &lt;identification&gt;\n            &lt;userAgent match=&quot;^W3C_Validator&quot; /&gt;\n        &lt;/identification&gt;\n        &lt;capabilities&gt;\n            &lt;capability name=&quot;browser&quot; value=&quot;W3C Validator&quot; /&gt;\n            &lt;capability name=&quot;ecmaScriptVersion&quot; value=&quot;1.2&quot; /&gt;\n            &lt;capability name=&quot;javascript&quot; value=&quot;true&quot; /&gt;\n            &lt;capability name=&quot;supportsCss&quot; value=&quot;true&quot; /&gt;\n            &lt;capability name=&quot;tables&quot; value=&quot;true&quot; /&gt;\n            &lt;capability name=&quot;tagWriter&quot; value=&quot;System.Web.UI.HtmlTextWriter&quot; /&gt;\n            &lt;capability name=&quot;w3cdomversion&quot; value=&quot;1.0&quot; /&gt;\n        &lt;/capabilities&gt;\n    &lt;/browser&gt;\n&lt;/browsers&gt;</code></pre>\n<p>You should now be able to pass the page by URL:</p>\n<p><a href=\"http://validator.w3.org/check?uri=http%3A%2F%2Fwww.andrewrowland.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://validator.w3.org/check?uri=http%3A%2F%2Fwww.andrewrowland.com</a></p>\n"}},{"node":{"title":"Validation groups in .Net","path":"/validation-groups-in-net/","date":"24. August 2008","timeToRead":1,"description":"Evening all. Not posted in a while as I've plenty going on in the 'real' world. Anyway, last week I was building a search form whereby you could either search by reference code, or by using full search criteria.","content":"<p>Evening all. Not posted in a while as I've plenty going on in the 'real' world. Anyway, last week I was building a search form whereby you could either search by reference code, or by using full search criteria.</p>\n<p>The problem I had is that both search 'forms' existed on one Web Form, and I was using Validation controls to check each. So when using either submit button, both search groups were validated together. Not useful when I wanted to submit each set of controls independently of each other. So there I was, coding to disable either set of validation controls when a submit button is clicked.</p>\n<p>Validation groups I hear you cry. Yes, I know that now.</p>\n<p>Add the ValidationGroup attribute to all controls, so you can group them together, and submit them separately from other groups. Example:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n&lt;p&gt;\n    &lt;asp:TextBox Id=&quot;TextBox1&quot; Runat=&quot;server&quot; ValidationGroup=&quot;First&quot; /&gt;\n    &lt;asp:TextBox Id=&quot;TextBox2&quot; Runat=&quot;server&quot; ValidationGroup=&quot;First&quot; /&gt;\n    &lt;asp:RequiredFieldValidator Id=&quot;RequiredFieldValidator1&quot; Runat=&quot;server&quot; ValidationGroup=&quot;First&quot; ErrorMessage=&quot;TextBox1 should not be blank&quot; ControlToValidate=&quot;TextBox1&quot; /&gt;\n\n    &lt;asp:Button ID=&quot;Submit1&quot; Runat=&quot;server&quot; ValidationGroup=&quot;First&quot; Text=&quot;Submit 1&quot; /&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n    &lt;asp:TextBox Id=&quot;TextBox3&quot; Runat=&quot;server&quot; ValidationGroup=&quot;Second&quot; /&gt;\n    &lt;asp:TextBox Id=&quot;TextBox4&quot; Runat=&quot;server&quot; ValidationGroup=&quot;Second&quot; /&gt;\n    &lt;asp:RequiredFieldValidator Id=&quot;RequiredFieldValidator2&quot; Runat=&quot;server&quot; ErrorMessage=&quot; TextBox3 should not be blank&quot; ControlToValidate=&quot;TextBox3&quot; ValidationGroup=&quot;Second&quot; /&gt;\n\n    &lt;asp:Button Id=&quot;Submit2&quot; Runat=&quot;server&quot; ValidationGroup=&quot;Second&quot; Text=&quot;Submit 2&quot; /&gt;\n&lt;/p&gt;\n\n&lt;/form&gt;</code></pre>\n<p>Aye, easy when you know. Googling is a wonderful thing.</p>\n"}},{"node":{"title":"jQuery UI Date Picker control issue with .Net","path":"/j-query-ui-date-picker-control-issue-with-net/","date":"11. June 2008","timeToRead":1,"description":"Aye, I do whitter on about jQuery. It's ace. The newly released jQuery UI is pretty special too. One of the many great widgets is the Date Picker control.","content":"<p>Aye, I do whitter on about <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery</a>. It's ace. The newly released <a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery UI</a> is pretty special too. One of the many great widgets is the Date Picker control.</p>\n<p>I build many .net applications that require date entry, so I implement the Date Picker control often. Unfortunately, there is a problem when it is used on a field that is validated using a .Net validation control. Upon clicking on a date, I get the following error:</p>\n<pre class=\"language-text\"><code class=\"language-text\">length is null or not an object</code></pre>\n<p>This only occurs when using Internet Explorer. Currently, my only solution is to edit the source code. Locate the following code in <strong>jquery-ui.js</strong> or <strong>ui.datepicker.js</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">inst.input.trigger(&#39;change&#39;)</code></pre>\n<p>Replace it with:</p>\n<pre class=\"language-text\"><code class=\"language-text\">if (!$.browser.msie){inst.input.trigger(&#39;change&#39;)}</code></pre>\n<p>This prevents the change event firing in IE.</p>\n<p>I wouldn't normally advocate changing source code in this manner, as it makes future upgrades tedious. Hopefully it will be addressed in a future release.</p>\n"}},{"node":{"title":"Using jQuery selectors to reference .Net controls","path":"/using-j-query-selectors-to-reference-net-controls/","date":"4. June 2008","timeToRead":1,"description":"","content":"<p>You place a control onto your page:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;Content&quot; Runat=&quot;Server&quot;&gt;\n    &lt;asp:TextBox Id=&quot;Firstname&quot; Runat=&quot;Server&quot; /&gt;\n&lt;/asp:Content&gt;</code></pre>\n<p>The output is rendered as:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;input name=&quot;ctl00$Content$FirstName&quot; type=&quot;text&quot; id=&quot;ctl00_Content_FirstName&quot; /&gt;</code></pre>\n<p>In the example above, the disparity in the rendered id attribute occurs because the TextBox control has been placed within a Content control, as the Page object inherits a MasterPage.</p>\n<p>So how can you robustly reference the control using client-side JavaScript, regardless where the control resides?Â  Using jQuery it's fairly trivial:</p>\n<pre class=\"language-text\"><code class=\"language-text\">var $firstname = $(&quot;[id$=FirstName]&quot;);</code></pre>\n<p>This little snippet makes use of the jQuery attributeEndsWith selector, as documented <a href=\"https://jquery.com/#attributevalue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.Â  Bare in mind that an array is returned, as any control with an id that ends in FirstName will be selected.</p>\n"}},{"node":{"title":"Consume .Net Web service using jQuery","path":"/consume-net-web-service-using-j-query/","date":"29. April 2008","timeToRead":3,"description":"The JavaScript functionality that is injected into .Net pages seems limited when compared to jQuery.\nWhilst looking for a way to use jQuery instead of the stock Microsoft client library, I came across an excellent article.","content":"<p>The JavaScript functionality that is injected into .Net pages seems limited when compared to jQuery.</p>\n<p>Whilst looking for a way to use jQuery instead of the stock Microsoft client library, I came across this <a href=\"http://encosia.com/2008/03/27/using-jquery-to-consume-aspnet-json-web-services/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">excellent article</a>.</p>\n<p>There doesn 't seem to be too much on Web about this subject. Maybe most .Net developers stick to Microsoft tools, but I like using jQuery for all my client scripting, and would rather not use more than one library. So as it look me a while to get example code working, I 've included my efforts.</p>\n<p>Below is a simple .Net Web service. Once again, I 've used continents and countries as my simple dataset. Pass a continent to the service, and it will return an array of countries.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;%@ webservice Language=&quot;C#&quot; class=&quot;AndrewRowland.Continents&quot; %&gt;\n\nusing System;\nusing System.Web.Script.Services;\nusing System.Web.Services;\nusing System.Collections;\nusing System.Collections.Specialized;\n\nnamespace AndrewRowland\n{\n    [ScriptService]\n    [WebService(Namespace = &quot;AndrewRowland&quot;)]\n    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n    public class Continents\n    {\n        [WebMethod(Description=&quot;Returns array of countries for a given continent.&quot;)]\n        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]\n        public string[] GetCountries(string continent)\n        {\n            Hashtable ht = new Hashtable();\n\n            ht.Add(&quot;Europe&quot;, new string[] {&quot;UK&quot;, &quot;France&quot;, &quot;Germany&quot;});\n            ht.Add(&quot;Africa&quot;, new string[] {&quot;South Africa&quot;, &quot;Zimbabwe&quot;, &quot;Cameroon&quot;});\n            ht.Add(&quot;North America&quot;, new string[] {&quot;USA&quot;, &quot;Canada&quot;});\n\n            return (string[]) ht[continent];\n        }\n    }\n}</code></pre>\n<p>Note the response format, which is JSON. Originally, I omitted this, and serialized the data as a JSON string using the .Net JavaScriptSerializer class, before returning it.</p>\n<p>This resulted in the client having to evaluate the returned string to build an array. By returning an array, the JSON object is instantly available in our client code, without any jiggery-pokery.</p>\n<p>To enable the client to call the Web service, I had to add following in my web.config file under the system.web section:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;webServices&gt;\n    &lt;protocols&gt;\n        &lt;add name=&quot;HttpPost&quot;/&gt;\n    &lt;/protocols&gt;\n&lt;/webServices&gt;</code></pre>\n<p>Sample client code that calls the .Net Web service:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;World example&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;/path/to/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    $(document).ready(function() {\n        $(&#39;#submit&#39;).click(function() {\n            $.ajax({\n                type: &quot;POST&quot;,\n                data: &#39;{continent: &quot;&#39; + $(&#39;#txtContinent&#39;).val() + &#39;&quot;}&#39;,\n                url: &quot;/services/example.asmx/GetCountries&quot;,\n                contentType: &quot;application/json; charset=utf-8&quot;,\n                dataType: &quot;json&quot;,\n                success: function(response) {\n                    var data = (typeof response.d) == &#39;string&#39; ? eval(&#39;(&#39; + response.d + &#39;)&#39;) : response.d;\n\n                    $(&#39;#result&#39;).empty().append(&#39;&lt;table border=1&gt;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&#39;);\n\n                    $(&#39;&lt;th/&gt;&#39;).text($(&#39;#txtContinent&#39;).val()).appendTo(&#39;#result thead tr&#39;);\n\n                    for (var i = 0; i &lt; data.length; i ++) {\n                        $(&#39;&lt;tr/&gt;&#39;).append($(&#39;&lt;td/&gt;&#39;).text(data[i])).appendTo(&#39;#result tbody&#39;);\n                    }\n                },\n                failure: function(msg) {\n                    $(&#39;#result&#39;).empty().append(msg);\n                }\n            });\n        });\t\n    });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p&gt;&lt;label for=&quot;txtContinent&quot;&gt;Continent&lt;/label&gt;&lt;br /&gt;\n&lt;input type=&quot;text&quot; id=&quot;txtContinent&quot; /&gt; &lt;input id=&quot;submit&quot; type=&quot;button&quot; value=&quot;Submit&quot; /&gt;&lt;/p&gt;\n\n&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Note line 15:</p>\n<pre class=\"language-text\"><code class=\"language-text\">var data = (typeof response) == &#39;string&#39; ? eval(&#39;(&#39; + response + &#39;)&#39;) : response;</code></pre>\n<p>I added this line so that the data object is correctly evaluated if a serialized JSON string is returned.</p>\n<p>There you have it, avoid the Microsoft code bloat, with not a ScriptManager tag in sight.</p>\n"}}]}}},"context":{}}