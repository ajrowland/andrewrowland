{"hash":"3abed4817c87332b7256cc04f5102649b2af0839","data":{"tag":{"title":"JavaScript","belongsTo":{"edges":[{"node":{"title":"Create Episerver Find index using Puppeteer","path":"/create-episerver-find-index-using-puppeteer/","date":"18. February 2018","timeToRead":1,"description":"Currently working with many clients who utilise Episerver CMS to managed their content. Almost all of then use Episerver Find to index content.","content":"<p>Currently working with many clients who utilise Episerver CMS to managed their content. Almost all of then use <a href=\"https://find.episerver.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Episerver Find</a> to index content.</p>\n<p>Episerver do not provide an API to automate the creation of new indices. As I was messing around with <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Puppeteer</a> and headless Chrome, I thought I’d knock up a tool to do this. You can find the code in my <a href=\"https://github.com/ajrowland/create-episerver-find-index\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repo</a>.</p>\n<p>Using your favourite shell, clone the repo:</p>\n<pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/ajrowland/create-episerver-find-index.git\ncd create-episerver-find-index</code></pre>\n<p>Install dependencies:</p>\n<pre class=\"language-text\"><code class=\"language-text\">npm install</code></pre>\n<p>You’ll need to create a <a href=\"https://find.episerver.com/Account/Register\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">developer account for Find</a>. Once this is done, you can create an index with the following:</p>\n<pre class=\"language-text\"><code class=\"language-text\">node createindex.js --username [username] --password [password] --indexname [indexname]</code></pre>\n<p>The script returns the configuration for the newly created index, or an existing index if it already exists.</p>\n<p>Ultimately I hope to use something like this within a continuous integration, or deployment pipeline, to make certain a valid index is available for the application.</p>\n<p>Hope this helps someone.</p>\n"}},{"node":{"title":"TypeScript Sublime Text integration","path":"/type-script-sublime-text-integration/","date":"8. October 2012","timeToRead":1,"description":"Something interesting has happened in the world of JavaScript development. Of all people, the folk at Microsoft have developed TypeScript.","content":"<p>Something interesting has happened in the world of JavaScript development. Of all people, the folk at Microsoft have developed TypeScript. If you’re in to such things, I don’t need to explain further. There is a Visual Studio 2012 plugin, but these days I’ve fallen in love with Sublime Text. Here’s a quick howto on TypeScript development with Sublime Text, specifically on Windows 7.</p>\n<p>First install theNode.jsmsi package. Once installed, open a command prompt and type the following to install the TypeScript compiler:</p>\n<pre class=\"language-text\"><code class=\"language-text\">npm install -g typescript</code></pre>\n<p>Now grab the Sublime Text syntax hightlight definition file from MSDN. Open the zip and copy the <em>typescript.tmplanguage</em> file to your Sublime Text user packages directory. Mine is located in:</p>\n<pre class=\"language-text\"><code class=\"language-text\">C:\\Users\\arowland\\AppData\\Roaming\\Sublime Text 2\\Packages\\User\\</code></pre>\n<p>Now open Sublime Text. Select <strong>Tools -> Build System -> New Build System</strong>. Paste in the following:</p>\n<pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;selector&quot;: &quot;source.ts&quot;,\n    &quot;cmd&quot;: [&quot;tsc.cmd&quot;, &quot;$file&quot;],\n    &quot;file_regex&quot;: &quot;^(.+?) \\\\((\\\\d+),(\\\\d+)\\\\): (.+)$&quot;\n}</code></pre>\n<p>Save this file. Now you can create a new JavaScript file, and save with the .ts extension. The editor will highlight TypeScript code, and allow you to compile to JavaScript by pressing <strong>Ctrl+B</strong>. The build process will create the compiled JavaScript file in the same directory as the source TypeScript.</p>\n"}},{"node":{"title":"jQuery UI Date Picker control issue with .Net","path":"/j-query-ui-date-picker-control-issue-with-net/","date":"11. June 2008","timeToRead":1,"description":"Aye, I do whitter on about jQuery. It's ace. The newly released jQuery UI is pretty special too. One of the many great widgets is the Date Picker control.","content":"<p>Aye, I do whitter on about <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery</a>. It's ace. The newly released <a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jQuery UI</a> is pretty special too. One of the many great widgets is the Date Picker control.</p>\n<p>I build many .net applications that require date entry, so I implement the Date Picker control often. Unfortunately, there is a problem when it is used on a field that is validated using a .Net validation control. Upon clicking on a date, I get the following error:</p>\n<pre class=\"language-text\"><code class=\"language-text\">length is null or not an object</code></pre>\n<p>This only occurs when using Internet Explorer. Currently, my only solution is to edit the source code. Locate the following code in <strong>jquery-ui.js</strong> or <strong>ui.datepicker.js</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">inst.input.trigger(&#39;change&#39;)</code></pre>\n<p>Replace it with:</p>\n<pre class=\"language-text\"><code class=\"language-text\">if (!$.browser.msie){inst.input.trigger(&#39;change&#39;)}</code></pre>\n<p>This prevents the change event firing in IE.</p>\n<p>I wouldn't normally advocate changing source code in this manner, as it makes future upgrades tedious. Hopefully it will be addressed in a future release.</p>\n"}},{"node":{"title":"Using jQuery selectors to reference .Net controls","path":"/using-j-query-selectors-to-reference-net-controls/","date":"4. June 2008","timeToRead":1,"description":"","content":"<p>You place a control onto your page:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;asp:Content ID=&quot;Content1&quot; ContentPlaceHolderID=&quot;Content&quot; Runat=&quot;Server&quot;&gt;\n    &lt;asp:TextBox Id=&quot;Firstname&quot; Runat=&quot;Server&quot; /&gt;\n&lt;/asp:Content&gt;</code></pre>\n<p>The output is rendered as:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;input name=&quot;ctl00$Content$FirstName&quot; type=&quot;text&quot; id=&quot;ctl00_Content_FirstName&quot; /&gt;</code></pre>\n<p>In the example above, the disparity in the rendered id attribute occurs because the TextBox control has been placed within a Content control, as the Page object inherits a MasterPage.</p>\n<p>So how can you robustly reference the control using client-side JavaScript, regardless where the control resides?Â  Using jQuery it's fairly trivial:</p>\n<pre class=\"language-text\"><code class=\"language-text\">var $firstname = $(&quot;[id$=FirstName]&quot;);</code></pre>\n<p>This little snippet makes use of the jQuery attributeEndsWith selector, as documented <a href=\"https://jquery.com/#attributevalue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.Â  Bare in mind that an array is returned, as any control with an id that ends in FirstName will be selected.</p>\n"}},{"node":{"title":"JavaScript event delegation","path":"/java-script-event-delegation/","date":"18. May 2008","timeToRead":2,"description":"As I've mentioned previously I'm creating a dashboard to represent the components in the exchange that I work for. Each component widget on the page has a number of events associated with it. This has become less manageable, the more I add. So I thought about using one delegate to handle all events, and pass on a component reference, and parameters to other functions.","content":"<p>A quick google led me to <a href=\"https://blog.danwebb.net/2008/2/8/event-delegation-made-easy-in-jquery\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this article</a> by <a href=\"https://blog.danwebb.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dan Webb</a>. Looks like a common technique. Very useful article, though I needed to be able to pass parameters to the functions. There may be a better to way to do this, but this is how I achieved it.</p>\n<p>Using jQuery (what else?!) the delegate method is called via an onClick event on the body of the document. In this case, it checks that the target of the event is a button. If any other element is clicked, nothing will happen.</p>\n<p>Using jQuery (what else?!) the delegate method is called via an onClick event on the body of the document. In this case, it checks that the target of the event is a button. If any other element is clicked, nothing will happen.</p>\n<pre class=\"language-text\"><code class=\"language-text\">$(document).ready(function(){\n    $(&#39;body&#39;).click(function(e){\n        if (e.target.type == &#39;submit&#39; || e.target.type == &#39;button&#39;){\n            var t = $(e.target);\n            var fn = t.attr(&#39;class&#39;);\n            var p = eval(&#39;(&#39; + t.find(&#39;.params&#39;).html() + &#39;)&#39;);\n\n            window[fn].call(this, t, p);\n        }\n    });\n});</code></pre>\n<p>The function that the delegate passes the parameters to, is decided by the class name of the button. You could also use this class name to style the button in any manner you wish. The parameters to pass to this function are evaluated from JSON that is stored within hidden span class called params. Example button markup:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;button class=&quot;changeLabel&quot;&gt;\n    &lt;span class=&quot;params&quot;&gt;\n        {message:&quot;Button pressed&quot;}\n    &lt;/span&gt;\n    &lt;span class=&quot;label&quot;&gt;\n        Press me\n    &lt;/span&gt;\n&lt;/button&gt;</code></pre>\n<p>I've surrounded the button label text within another span class called label. This enables me to change the label text without losing the parameters. Simple CSS is used to hide the parameter span tag:</p>\n<pre class=\"language-text\"><code class=\"language-text\">.params {\n    display: none;\n}</code></pre>\n<p>The way I've stored the parameters may be a little odd, and I feel I may be missing something here. I construct my dashboard dynamically using jQuery, so all the parameters are injected into each control buttons at runtime. If anyone can point out an easier solution feel free to share. Full example:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Delegate example&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;/path/to/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    $(document).ready(function(){\n        $(&#39;body&#39;).click(function(e){\n            if (e.target.type == &#39;submit&#39; || e.target.type == &#39;button&#39;){\n                var t = $(e.target);\n                var fn = t.attr(&#39;class&#39;);\n                var p = eval(&#39;(&#39; + t.find(&#39;.params&#39;).html() + &#39;)&#39;);\n\n                window[fn].call(this, t, p);\n            }\n        });\n    });\n\n    function changeLabel(obj, params){\n        obj.find(&#39;.label&#39;).text(params.message);\n    }\n    &lt;/script&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n    .params {\n        display: none;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;button class=&quot;changeLabel&quot;&gt;\n    &lt;span class=&quot;params&quot;&gt;\n        {message:&quot;Button pressed&quot;}\n    &lt;/span&gt;\n    &lt;span class=&quot;label&quot;&gt;\n        Press me\n    &lt;/span&gt;\n&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n"}},{"node":{"title":"Consume .Net Web service using jQuery","path":"/consume-net-web-service-using-j-query/","date":"29. April 2008","timeToRead":3,"description":"The JavaScript functionality that is injected into .Net pages seems limited when compared to jQuery.\nWhilst looking for a way to use jQuery instead of the stock Microsoft client library, I came across an excellent article.","content":"<p>The JavaScript functionality that is injected into .Net pages seems limited when compared to jQuery.</p>\n<p>Whilst looking for a way to use jQuery instead of the stock Microsoft client library, I came across this <a href=\"http://encosia.com/2008/03/27/using-jquery-to-consume-aspnet-json-web-services/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">excellent article</a>.</p>\n<p>There doesn 't seem to be too much on Web about this subject. Maybe most .Net developers stick to Microsoft tools, but I like using jQuery for all my client scripting, and would rather not use more than one library. So as it look me a while to get example code working, I 've included my efforts.</p>\n<p>Below is a simple .Net Web service. Once again, I 've used continents and countries as my simple dataset. Pass a continent to the service, and it will return an array of countries.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;%@ webservice Language=&quot;C#&quot; class=&quot;AndrewRowland.Continents&quot; %&gt;\n\nusing System;\nusing System.Web.Script.Services;\nusing System.Web.Services;\nusing System.Collections;\nusing System.Collections.Specialized;\n\nnamespace AndrewRowland\n{\n    [ScriptService]\n    [WebService(Namespace = &quot;AndrewRowland&quot;)]\n    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n    public class Continents\n    {\n        [WebMethod(Description=&quot;Returns array of countries for a given continent.&quot;)]\n        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]\n        public string[] GetCountries(string continent)\n        {\n            Hashtable ht = new Hashtable();\n\n            ht.Add(&quot;Europe&quot;, new string[] {&quot;UK&quot;, &quot;France&quot;, &quot;Germany&quot;});\n            ht.Add(&quot;Africa&quot;, new string[] {&quot;South Africa&quot;, &quot;Zimbabwe&quot;, &quot;Cameroon&quot;});\n            ht.Add(&quot;North America&quot;, new string[] {&quot;USA&quot;, &quot;Canada&quot;});\n\n            return (string[]) ht[continent];\n        }\n    }\n}</code></pre>\n<p>Note the response format, which is JSON. Originally, I omitted this, and serialized the data as a JSON string using the .Net JavaScriptSerializer class, before returning it.</p>\n<p>This resulted in the client having to evaluate the returned string to build an array. By returning an array, the JSON object is instantly available in our client code, without any jiggery-pokery.</p>\n<p>To enable the client to call the Web service, I had to add following in my web.config file under the system.web section:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;webServices&gt;\n    &lt;protocols&gt;\n        &lt;add name=&quot;HttpPost&quot;/&gt;\n    &lt;/protocols&gt;\n&lt;/webServices&gt;</code></pre>\n<p>Sample client code that calls the .Net Web service:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;World example&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;/path/to/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    $(document).ready(function() {\n        $(&#39;#submit&#39;).click(function() {\n            $.ajax({\n                type: &quot;POST&quot;,\n                data: &#39;{continent: &quot;&#39; + $(&#39;#txtContinent&#39;).val() + &#39;&quot;}&#39;,\n                url: &quot;/services/example.asmx/GetCountries&quot;,\n                contentType: &quot;application/json; charset=utf-8&quot;,\n                dataType: &quot;json&quot;,\n                success: function(response) {\n                    var data = (typeof response.d) == &#39;string&#39; ? eval(&#39;(&#39; + response.d + &#39;)&#39;) : response.d;\n\n                    $(&#39;#result&#39;).empty().append(&#39;&lt;table border=1&gt;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&#39;);\n\n                    $(&#39;&lt;th/&gt;&#39;).text($(&#39;#txtContinent&#39;).val()).appendTo(&#39;#result thead tr&#39;);\n\n                    for (var i = 0; i &lt; data.length; i ++) {\n                        $(&#39;&lt;tr/&gt;&#39;).append($(&#39;&lt;td/&gt;&#39;).text(data[i])).appendTo(&#39;#result tbody&#39;);\n                    }\n                },\n                failure: function(msg) {\n                    $(&#39;#result&#39;).empty().append(msg);\n                }\n            });\n        });\t\n    });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;p&gt;&lt;label for=&quot;txtContinent&quot;&gt;Continent&lt;/label&gt;&lt;br /&gt;\n&lt;input type=&quot;text&quot; id=&quot;txtContinent&quot; /&gt; &lt;input id=&quot;submit&quot; type=&quot;button&quot; value=&quot;Submit&quot; /&gt;&lt;/p&gt;\n\n&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Note line 15:</p>\n<pre class=\"language-text\"><code class=\"language-text\">var data = (typeof response) == &#39;string&#39; ? eval(&#39;(&#39; + response + &#39;)&#39;) : response;</code></pre>\n<p>I added this line so that the data object is correctly evaluated if a serialized JSON string is returned.</p>\n<p>There you have it, avoid the Microsoft code bloat, with not a ScriptManager tag in sight.</p>\n"}},{"node":{"title":"CodeIgniter and Ajax","path":"/code-igniter-and-ajax/","date":"27. April 2008","timeToRead":3,"description":"I've been asked to create a dashboard for many devices across our network. To display real-time information on each component, I'm thinking of using Web services, and AJAX. Like most aspects of coding, using a framework to do all the heavy lifting, rather than developing your own, is a sensible approach.\nSo today I took a look at jQuery, a JavaScript framework. I have to admit, I'm pretty impressed. It did not take me long to come up with some example code, that degrades well when JavaScript is disabled in the browser.","content":"<p>I've been asked to create a dashboard for many devices across our network. To display real-time information on each component, I'm thinking of using Web services, and AJAX. Like most aspects of coding, using a framework to do all the heavy lifting, rather than developing your own, is a sensible approach.</p>\n<p>So today I took a look at jQuery, a JavaScript framework. I have to admit, I'm pretty impressed. It did not take me long to come up with some example code, that degrades well when JavaScript is disabled in the browser.</p>\n<p>My example app lists continents. Clicking on a continent will return a list of countries in that continent.</p>\n<p>Create a CodeIgniter controller and save as <strong>world.php</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;?php\nclass World extends Controller {\n\n    function World()\n    {\n        parent::Controller();\n    }\n\n    function index($continent = NULL)\n    {\n        // Set continents data.  In a real application we\n        // would obtain this from a database via a model.\n        $data[&#39;continents&#39;] = array(\n                1 =&gt; &#39;Europe&#39;,\n                2 =&gt; &#39;Africa&#39;,\n                3 =&gt; &#39;North America&#39;,\n            );\n\n        // If a non-Ajax continent selection is made, call the\n        // list_countries method, and set countries data.\n        if (isset($continent))\n        {\n            $data[&#39;countries&#39;] = $this-&gt;list_countries($continent);\n        }\n\n        // Load world view.\n        $this-&gt;load-&gt;view(&#39;world_view&#39;, $data);\n    }\n\n    function list_countries($continent)\n    {\n        // Generated countries data.  As before, this would be\n        // obtained from a model.\n        $continents = array(\n                1 =&gt; array(&#39;UK&#39;, &#39;France&#39;, &#39;Germany&#39;),\n                2 =&gt; array(&#39;South Africa&#39;, &#39;Zimbabwe&#39;, &#39;Cameroon&#39;),\n                3 =&gt; array(&#39;USA&#39;, &#39;Canada&#39;),\n            );\n\n        // Decide whether to return JSON data, or an array,\n        // depending if $_POST[&#39;ajax&#39;] is set.\n        if (isset($_POST[&#39;ajax&#39;]))\n        {\n            echo json_encode($continents[$continent]);\n        }\n        else\n        {\n            return $continents[$continent];\n        }\n    }\n}\n?&gt;</code></pre>\n<p>Create a view and save as <strong>world_view.php</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;World example&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    function list_countries(id) {\n        $(&#39;li &gt; ul&#39;).slideUp(&#39;slow&#39;);\n\n        if ($(&#39;#id_&#39; + id).children(&#39;ul&#39;).length == 0) {\n            $.post(&#39;/world/list_countries/&#39; + id, {ajax:&#39;true&#39;},\n                function(data){\n                    unorderedlist = $(&#39;&lt;ul/&gt;&#39;).css(&#39;display&#39;, &#39;none&#39;);\n\n                    $.each(data, function(i, country){\n                        $(&#39;&lt;li/&gt;&#39;).text(country).appendTo(unorderedlist);\n                    });\n\n                    unorderedlist.appendTo(&#39;#id_&#39; + id);\n                    unorderedlist.slideDown(&#39;slow&#39;);\n                }, &#39;json&#39;);\t\n        } else {\n            $(&#39;#id_&#39; + id + &#39; &gt; ul&#39;).slideDown(&#39;slow&#39;);\n        }\n\n        return false;\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;ul&gt;\n    &lt;?php foreach($continents as $id =&gt; $name):?&gt;\n    &lt;li id=&quot;id_&lt;?=$id;?&gt;&quot;&gt;&lt;a onclick=&quot;return list_countries(&lt;?=$id;?&gt;);&quot; href=&quot;&lt;?=site_url(&quot;/world/index/$id&quot;);?&gt;&quot; title=&quot;Show countries in &lt;?=$name;?&gt;&quot;&gt;&lt;?=$name;?&gt;&lt;/a&gt;\n    &lt;?php if ($id == $this-&gt;uri-&gt;segment(3)):?&gt;\n    &lt;ul&gt;\n        &lt;?php foreach($countries as $country):?&gt;\n        &lt;li&gt;&lt;?=$country;?&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;?php endforeach;?&gt;\n    &lt;/ul&gt;&lt;/li&gt;\n    &lt;?php endif;?&gt;\n    &lt;?php endforeach;?&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>I just noticed that my ISP only has PHP4 installed. If this is the case for you, you will have to alter the controller to get this to work. Change the line:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;a href=&quot;http://www.php.net/echo&quot;&gt;echo&lt;/a&gt; json_encode($continents[$continent]);</code></pre>\n<p>To:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;a href=&quot;http://www.php.net/echo&quot;&gt;echo&lt;/a&gt; &#39;[&quot;&#39; . &lt;a href=&quot;http://www.php.net/implode&quot;&gt;implode&lt;/a&gt;(&#39;&quot;,&quot;&#39;, $continents[$continent]) . &#39;&quot;]&#39;;</code></pre>\n<p>Obviously this solution does not scale well for more complex data structures. I would advise using a JSON serializer library of some description. You could also create a view for the JSON structures, and pass data to that. This would actually be a sensible approach, as you would have complete control over the output.</p>\n"}}]}}},"context":{}}