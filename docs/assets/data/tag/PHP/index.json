{"hash":"b440d2dfedc5f7355f69b42f14a3a17b5add6387","data":{"tag":{"title":"PHP","belongsTo":{"edges":[{"node":{"title":"Wolf CMS Related Pages plugin","path":"/wolf-cms-related-pages-plugin/","date":"17. May 2010","timeToRead":1,"description":"For many small projects I've been using Wolf CMS. a really nice and fairly lightweight application for managing content. What I like about it is that the core code is quite minimal, but allows you to extend using plugins.","content":"<p>For many small projects I've been using Wolf CMS, a really nice and fairly lightweight application for managing content. What I like about it is that the core code is quite minimal, but allows you to extend using plugins.</p>\n<p>Recently I've been asked to build a site that requires a the ability to relate other pages to the one an editor is currently editing.</p>\n<p>The plugin can be <a href=\"/downloads/related_pages.zip\">downloaded here</a>. Note: This version is for Wolf 0.7.2 and above. The older plugin for Wolf 0.6 is <a href=\"/downloads/related_pages_0_0_2.zip\">also available</a>. Once installed in the plugins directory and enabled in the administration screen, the following tab is now available when editing pages: Once installed in the plugins directory and enabled in the admininistration screen, the following tab is now available when editing pages:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 478 450' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5033ed37e3b6c24e79e25cce3c03d112'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5033ed37e3b6c24e79e25cce3c03d112)' width='478' height='450' xlink:href='data:image/gif%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAYAAADWibxkAAAACXBIWXMAAAPoAAAD6AG1e1JrAAANb0lEQVRo3uVa%2bXNb1RXO39JSIHsIJBCyEdbpTCnlh7a/MHSmUEJbhgIpy5AQKB1mykACZCEZyrBkIU7sOI4db7JlO973Rbtlydpl2ZZsSZZtWYu/nnOf3rOsyEsCjeWgmW/u03v3vvfueWf5zrl3jdNth2fIhRG/72eJNW6vE/0DRtReV6OuvgbXG%2boItdJxfa1A5vk7CWsC46N4%2b503ce/ae/DAtvuxceN6bNy0AVvvvw%2bbt2zClvs2i%2bMNG9Zh0%2baNos/9D2ydB76%2bWrFmLOjHiy%2b9gLvv%2bRW20mR%2b88xv8fTTv8ZmmvieR3Zj1%2b6HqeNWPPPs7/DkE/uwdt292EBCYmGsW79WEdZ9W7esSpAARvHy3/bj7rvvwoMP78Chf32IP/7%2bWbz8yqs4/MFBHPrgEB5/4gkcPPwe/vnmGzjwxut4%2ba/78dL%2bF/HagQN4/rk/kEA2rFpNkARAE7qHNGD7jofw1sFD%2bNPzz%2bGtd9/FoffewYG3D%2bDRxx7Hq/94BY899SS%2bOP4Fjnx2FJ988h8c//JLvPr3F7CezINNY9WawF9eehG/vOsXwuZ37HoYu/fsxPaHtmPbdrLx1MQ2bFyHtet5olvx6JNPYf/%2bP5N/2ETXtmAjmcOmVQrhBF8/8BpN9gH60vvI5ndiJ2H3nl3YvXc39jAe2YNH9u3Fvkf3ivM7d%2b3Atge3SdcIfG3vPqnPaoMIgzqDFp3dHeju7VoWevq60avpWXb/XMYal8cBu9MGm2PwZwkhAKvNArOlHwNWcwr9RI5MhH5x3pxqpXMS5veXkK1P%2bthsY8Q47p82VoxLIb0fXzOZjTCY9ALGfoOAoX/umMF9uG%2b2Z2VCCGDQbhF/LIMDSuvyOOFw2YWUuB20W0XrdDsEbPRf7iuPY0FyHwfRa25Zsxwum9TyGLqXZZAenBojjxNj%2bN6pZ9pdkkbanYPKM1gYXp8H4Ykg4skYZpHATDyKmdg04okZxPiYEJ2ZFH3cXpcYY0l7VjZkCIDB2mBA8dUrUNfVorW9lehwnbD7anUVyq4Vo6qqEp29Pco4MXkSiEHfh6rqKqjV1ahSq9DQeB11dXWoIxqtqiqne7VJk1eEPYBB2wBqa6tRc70OZaVFqFBVoL6hES1tzWhqaRbvIwsgFB4H/zpa6lFdU4cBM02QNEyj6SItMMFKlN5is4s%2bwdCY0KqbEoAQAn1Fg7EXBZfycPrkSXz6%2bRf4%2bOOP0dDSApVKhW9OncCxz4%2biTF0DB30hoaYEK30xbXc7Tp/%2bL04cP4avv/0aJ48dwdEj1J/4wudHP8U3Z87BnK76BJt9AAUXzxOnOI2vvjqOb777GieOnsSxU1/iFI0zWgZgpRdllR4LBsTkivPzcJB4yvuHP8Rnn36C9z84TKTtPfp/GIWlKtFnbNwvxshatmwTYDXmllXRQr6guaURfTqNMAGG%2bBryV6e%2b2WBJ%2bQO2x36yx7nWqNxf9E216fbeb6H3sJjQ2NwAvcmg3JOvsWoDSUi/hFB9VntuGYmk1IIMhDVgsXeUoQjATA/mCU5FJ4VdRWemxM3Y1ti%2bpun8NJ2LpsB9FgOPyYZotv6pa/I4bpOzceVYvA8hkbJ9vsYtBJIK%2bJwM7ruc90wJwCq%2bADseHijfjDtMTUeQ/TebeolkGhLzXiIb5ve/8cWz908o/Xjyy0Hm2IVwgwAkFUqKyffqdNAa9LCRKnZ190Cj16KX7Ly1rQ1joaAQwnJf6KdCugZkQ3qf5WBBAbD6cSjk0MMCaGlpRVVNDbqa61BYVILR8TEhAFktF3po%2bvnZZWjI7UZWAaTbEQuCfxOREDxDHsVE0n%2byEFggEubMJFcnvqQA5r04HRsp5vaQSTgGTSgoKEBZZTmulRShrKKSYr0ajQ0tiJC/8PmGMDLiw8ioj7x2aPVqQKYacwgKhQOIRILoFzTURHxBRyGLWCOxPK/Hg0mKFP7AKPz%2bYQz5vHeOANiTeoa86Og1YCwwQhMLZ6j%2bwj/FD6xGE2AkUgLQ6PtRpGqDzaDB%2be/O4lzBJZz9/gwuEmN0k3A8Hi%2b8XjdcLiecDhu1Drg9bsRn%2bUGyMFehAGTHxnyA1T%2bRYl3sFGeIaISp5R%2bf4z6CKEUZk4I8zXL8ViYfX31O0DfsRWCM7JpU32qzIhDwoa%2bvBx2d7TAa9RikZKVPo0GUWdsMMbkYZ2QpJimzupQjXSxELifGr4gAPENuMXlOLnwjQ3BTAlRZXoyGpibUUxbX1NxESVINguEgmYBXqD2bgcdNqS2lwcMjwySApGRO5DOWJipzJpMTApApI/%2bfSfFx5gbMCaZI1dN/ccERZB6QXMQ1JhSekMkbpMnnWBRIpCbmoq/q9nAxxIbOPg1cNhOaW9txrbgIhcQJiq9eJk7QDF1POy4XFKGK6wgdzVDX1ENVRn0KC1FdrcaFvB9IgxoprAYFZ/D7RzBCCBK9zikNmHOCSckRToVFbOeqC79wZCJAXMCIvt4uaIwGWAb00GoN8A050cO5g0GHQUptu7p64Rw0o6OjHWazGTrKKTilnoiEyaeMYpR4A1Pu8eDYPH%2bREybABIi9u9vrQZfGiHAoQL5gWAhkenoCkalISnkX5wMLsIQbM0yefK7kAiwEJ8Vzv99HWaEZBWXN8DgHkJ93AecuFaKmqoQSoyLkMR8oLCYTKIKfkiS7XeIBHCG8xBHYZySUokVMwULJU05pAMdyUcgQhZBJJOnFmer6hj2i6jJJGsDtNIU%2bqWLD7C9G2jGpOM3Mr5wtT89MZ3OICCUV9eZwyPY6TIlOsaqFGJ8ddoeFvrYLDhrLZXQj2X03OUifzwk92brVyiUyK%2bUPJthtFqEhUqUmKgiTXH2KpUpbt1sIS2pAujNkR%2bUdcpEAhtHUaRCcQG/Soqq0FLXXa9HSRpygvBTFFWqixjbYBq2oLi9BHpnLtWvlaGuug9bUj1Hy/Eyb3U4X3ZO4g9sFu9NOrHJCCbk5lQ5nsrTJqQnwuKloRJjE/FieruqCHQhaLDtKWavSfYCoPdBzV4INLlsA/Ppuj1OAv1aXllJhSozKy1UopfhfUVWDzq4ONDRch2%2bUTcVPYS1ANJracemYw1xiVnJyS5W0clAASeHseCKcCPGqcpgwQPbd292G1vZOaTWmX4/xcEiQnGFS9VESxjDlEz5SdabFiXnZ4c3X/FamIpQmBHnVpUdnEgyOIf8ik2EaH0vz9FkMIy3O50KR5KZ8gEyJnZTs5JU0w6TpRFl5GQquFKP0yiWcOZuHC%2bfPY5iE4vaQwyTyxImRi0zGLWi0C7FETITJH1v9ve0akH6OwxbvLGEmOEVwi4k6ECFqyz5CcIFkPLVqEyMnGBEpslRxTk%2bIkvMSrpXwBTcdBVgDOBPs7O2jL%2byElUKdzWaFl74uawbfr6u7g2zeDZNOjz5tN0bGx%2bFyDECj14lr/WYTorGoEv8zV5NyUgPm0uNZSoSG4aQJD3ns6OjsxJX8PPxw5nsUkSlU84bK2kpUqcpx9UIhyipKUNvUCrOhDwWXL6O47BrU6koaP0RJk1twAAYL1UHEirWJtSanBCAfx1OxmnmA3WETSZK8hBZPfT2h3IkoJpUltYSw%2b/kMIZFleW1W9BX8QMkHco0HUJjzEBxOUnOtFvYBE3raOlAr1v/LcLW0BNdVtbASQ6xWqdDYWIMmum7QkpYUlqCysgzqmhqxv%2bBy0VWEKHfwB/wYI67AZbdgaDzj%2bZlVohXmAcwBuDTGPIDNIBzyY2DADI22B62tzdAbdeho6UAwEoRG0wudrgca8gM6TRf6ujXo6mhFd28PDEY9Wqh/aCJE9wuI5IoF6xseElq0UK1wxQSQyQPGee2dnB/zgdHRIaLE04rnTyImSI%2b0bjCj%2bI3xUCBraSye4KX3qSzZ4lxpbe5d4itTEsssjTkppndrNRiixKi7qQ6FxeXkCPMJl9He1Q61qhLnvv0WFwou4srVK5QwGZGfdxZ55ATzL15AXkE%2bCi/n4dz5i6hvqMHVwmsYIRPgtQVeWvN43ATJ3NKLqv8PLLo/INs6vrx0zrm/SGFjU2KlaIwmEKB0mdVaFE1ddlEpZmc5MTmBcDhAPsRN4dIpKs3MG7geyGYVDI6LgirXELjkNkn9mVOwqUkVp6XX%2bW8VN2yRiZCHF1tPFtjlIXZzpCo73MrH6VoiL7EnhUePK9Ejm0ATYlxMqQekV4wkzCi7SJba7XEruGGTlLJXJ22/X%2bYev6U2Ht0KFrvnUju9fgxu0AB2cBzfkxlOh6XF8Z/VV95/91MLYSVwgw%2bQihNRNDfVw0jOS9NLOX5zC%2bX4o1IEIJuVt5/dCZgvAGrZGcXjUzh17AiOnTyBkyeO4d8ffQR1Q6tSF%2bStqHfC18%2bqAXNl8aQS9ycnQ6LqK3MAlhz3lfcOrmYsui6QToOR9l/emHgnYMFdYpy/Rygec92fW3aMoVBQHE%2bIGH1z4Pusmh0i8ldvqlWjoqJUFDyrKotxMS%2bf8nuDsj1mKZYlL4rwdluvoMe3f1/hLe0TlFQ9AafDITZFDDqcgtFZBgcxTNGAqSmnuLFEfEnEkwnB5qZnoqtrj5C0ASqZkZzMKvsEFtoLnA1c4JD39Oca/ge73Iv7xIu6FgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"478\" alt=\"Related pages plug-in screenshot\" data-srcset=\"/assets/static/screenshot_related_pages.69ed4eb.107b7ea9498b975710aa5c68c68d7a96.gif 478w\" data-sizes=\"(max-width: 478px) 100vw, 478px\" data-src=\"/assets/static/screenshot_related_pages.69ed4eb.107b7ea9498b975710aa5c68c68d7a96.gif\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/screenshot_related_pages.69ed4eb.107b7ea9498b975710aa5c68c68d7a96.gif\" width=\"478\" alt=\"Related pages plug-in screenshot\"></noscript></p>\n<p>See the documention screen for sample frontend code which lists the related pages.</p>\n<p>Please be aware that I really did knock this together rather quickly, but it works for me. If anyone finds any bugs, please let me know.</p>\n"}},{"node":{"title":"Using the Zend framework Lucene library Part 2","path":"/using-the-zend-framework-lucene-library-part-2/","date":"4. July 2008","timeToRead":3,"description":"Note: Since this article was written I’ve moved to WordPress, and have not implemented the example code listed below.\nIn a previous article I talked about using a library from the Zend framework to create a site search. As you try out this functionality using the search box, above right.","content":"<p><strong>Note</strong>: Since this article was written I’ve moved to WordPress, and have not implemented the example code listed below.</p>\n<p>In a previous article I talked about using a library from the Zend framework to create a site search. As you try out this functionality using the search box, above right.</p>\n<p>I never finished the article, so I'll explain here how I implemented this using CodeIgniter. I'll also detail how I built the 'quick results' tool (click in the search box).</p>\n<p>Below is an example controller class that shows how I constructed the search index by pulling articles out of the database. My actual class calls security methods that require authentication before performing any of these methods. I left them out of the listing to keep it short and sweet. You will have to alter the code to allow for the difference in database schema, and to suit your intended available search criteria.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;?php\nclass Search extends Controller {\n\n    function Search()\n    {\n        parent::Controller();\n\n        // Load Zend Lucene library.  See previous article.\n        $this-&gt;load-&gt;library(&#39;zend&#39;);\n        $this-&gt;zend-&gt;load( &#39;Zend/Search/Lucene&#39;);\n\n        // Location of search index.  Used by all Search controller methods.\n        $this-&gt;search_index = APPPATH . &#39;search/index&#39;;\n    }\n\n    function reindex()\n    {\n        // Create index.  Will delete any existing index.\n        $index = Zend_Search_Lucene::create($this-&gt;search_index);\n\n        // Obtain all articles.\n        $query = $this-&gt;db-&gt;get(&#39;articles&#39;);\n\n        // Loop through articles, adding an index for each one.\t\t\n        foreach ($query-&gt;result() as $article)\n        {\n            // Create Lucene document for this article.\n            $doc = new Zend_Search_Lucene_Document();\n\n            // Add required fields.\n            $doc-&gt;addField(Zend_Search_Lucene_Field::Text(&#39;title&#39;, $article-&gt;title));\n            $doc-&gt;addField(Zend_Search_Lucene_Field::Text(&#39;subtitle&#39;, $subtitle));\n            $doc-&gt;addField(Zend_Search_Lucene_Field::Text(&#39;category&#39;, $category_list));\n            $doc-&gt;addField(Zend_Search_Lucene_Field::Text(&#39;path&#39;, &#39;/article/display/&#39; . $article-&gt;path));\n            $doc-&gt;addField(Zend_Search_Lucene_Field::UnStored(&#39;content&#39;, $article-&gt;summary . $article-&gt;text));\n\n            // Add docuument to index.\n            $index-&gt;addDocument($doc);\n\n            echo &#39;Added &#39; . $item-&gt;title . &#39; to index.&lt;br /&gt;&#39;;\n        }\n\n        $index-&gt;optimize();\n    }\n\n    function optimize()\n    {\n        $index = Zend_Search_Lucene::open($this-&gt;search_index);\n        $index-&gt;optimize();\n\n        echo &#39;&lt;p&gt;Index optimized.&lt;/p&gt;&#39;;\n    }\n}</code></pre>\n<p>To utilise the index a result method is required:</p>\n<pre class=\"language-text\"><code class=\"language-text\">function result()\n{\n    // Create empty array, in case there are no results.\n    $data[&#39;results&#39;] = array();\n\n    // If a search_query parameter has been posted, search the index.\n    if ($this-&gt;input-&gt;post(&#39;search_query&#39;))\n    {\n        $index = Zend_Search_Lucene::open($this-&gt;search_index);\n\n        // Get results.\n        $data[&#39;results&#39;] = $index-&gt;find($this-&gt;input-&gt;post(&#39;search_query&#39;));\n    }\n\n    // Load view, and populate with results.\n    $this-&gt;load-&gt;view(&#39;search_result_view&#39;, $data);\n}</code></pre>\n<p>And, of course, a view is required to display the results:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Search results&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\t\t\n\n&lt;h1&gt;Search results&lt;/h1&gt;\n\n&lt;?php if (empty($_POST[&#39;search_query&#39;])):?&gt;\n&lt;p&gt;No search query submitted.&lt;/p&gt;\n&lt;?php else:?&gt;\n    &lt;?php if (count($results)):?&gt;\n&lt;p&gt;&lt;?php echo count($results) ?&gt; result(s) returned for query: &lt;?php echo $_POST[&#39;search_query&#39;];?&gt;&lt;/p&gt;\n&lt;ul&gt;\n    &lt;?php foreach($results as $result):?&gt;\n    &lt;li&gt;&lt;?=anchor(site_url($result-&gt;path), $result-&gt;title);?&gt; (&lt;?php echo round($result-&gt;score, 2) * 100;?&gt;%)&lt;/li&gt;\n    &lt;?php endforeach;?&gt;\n&lt;/ul&gt;\n    &lt;?php else:?&gt;\n&lt;p&gt;No results were returned for query: &lt;?php echo $_POST[&#39;search_query&#39;];?&gt;&lt;/p&gt;\n    &lt;?php endif;?&gt;\n&lt;?php endif;?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n"}},{"node":{"title":"Using the Zend framework Lucene library","path":"/using-the-zend-framework-lucene-library/","date":"23. May 2008","timeToRead":2,"description":"I know, only a few articles in, so I don't really need a site search function. But you never know, I might actually keep writing (even if no-one is reading) and so I've been looking around for some solutions.","content":"<p>I know, only a few articles in, so I don't really need a site search function. But you never know, I might actually keep writing (even if no-one is reading) and so I've been looking around for some solutions.</p>\n<p>I've looked at a few, for example: <a href=\"http://www.swish-e.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swish-e</a>, and <a href=\"http://www.sphider.eu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sphider</a>. Nothing really float my boat, until I had a look at the Zend Framework. It's another MVC based PHP framework, though it looks a little heavier than CodeIgniter. The documentation is not as good either, but it did have a Lucene library.</p>\n<p>I found a way of incorporating a Zend framework class as a CodeIgniter library here by Fred Wu. Nice work Fred, thanks.</p>\n<p>As Fred suggests, copy the Zend folder from the framework library to application/libraries/ in your CodeIgniter installation. I discovered that I only needed the Zend/Search folder, and the Zend/Exception.php file.</p>\n<p>Continuing Fred's instructions, create a Zend.php library file with the code posted on his blog page. Now we can get started.</p>\n<p>Create a directory for the index. In my example code I created a directory called application/search. Now we can create a controller called search.php that will contain some simple create, and search methods:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;?php\nclass Search extends MY_Controller {\n\n    function Search()\n    {\n        parent::MY_Controller();\n\n        $this-&gt;load-&gt;library(&#39;zend&#39;);\n        $this-&gt;zend-&gt;load(&#39;Zend/Search/Lucene&#39;); \n    }\n\n    function create()\n    {\n        // This method should be authenticated, or removed once the index is created.\n        // TODO: Some sort of site spidering process to add the entire site to the index.\n\n        $index = Zend_Search_Lucene::create(APPPATH . &#39;search/index&#39;);\n\n            $doc = Zend_Search_Lucene_Document_Html::loadHTMLFile(&#39;http://www.andrewrowland.com&#39;);\n\n            $index-&gt;addDocument($doc);\n\n        echo &#39;&lt;p&gt;Index created&lt;/p&gt;&#39;;\n    }\n\n    function index()\n    {\n        // TODO: Create an index method that contains a search form.\n    }\n\n    function result()\n    {\n        // Hardcoded search result example.\n        // TODO: Take a user search query, and expand the result summary\n\n        $index = Zend_Search_Lucene::open(APPPATH . &#39;search/index&#39;);\n\n        $data[&#39;results&#39;] = $index-&gt;find(&#39;andrew&#39;);\n\n        $this-&gt;load-&gt;view(&#39;search_result_view&#39;, $data);\t\t\n    }\n}\n?&gt;</code></pre>\n<p>I didn't bother with the create index view, as all that is needed is a simple message explaining that the index is created. The search_result_view.php view will display the results:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Search example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n    &lt;?php foreach($results as $result):?&gt;\n    &lt;li&gt;&lt;?php echo $result-&gt;title;?&gt;&lt;/li&gt;\n    &lt;?php endforeach;?&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>As you can see, I've noted a few TODO's. Might add a bit of jQuery action (because I'm worth it) in there to. Weekend coming up, so I'll expand on this next week.</p>\n"}},{"node":{"title":"CodeIgniter and Ajax","path":"/code-igniter-and-ajax/","date":"27. April 2008","timeToRead":3,"description":"I've been asked to create a dashboard for many devices across our network. To display real-time information on each component, I'm thinking of using Web services, and AJAX. Like most aspects of coding, using a framework to do all the heavy lifting, rather than developing your own, is a sensible approach.\nSo today I took a look at jQuery, a JavaScript framework. I have to admit, I'm pretty impressed. It did not take me long to come up with some example code, that degrades well when JavaScript is disabled in the browser.","content":"<p>I've been asked to create a dashboard for many devices across our network. To display real-time information on each component, I'm thinking of using Web services, and AJAX. Like most aspects of coding, using a framework to do all the heavy lifting, rather than developing your own, is a sensible approach.</p>\n<p>So today I took a look at jQuery, a JavaScript framework. I have to admit, I'm pretty impressed. It did not take me long to come up with some example code, that degrades well when JavaScript is disabled in the browser.</p>\n<p>My example app lists continents. Clicking on a continent will return a list of countries in that continent.</p>\n<p>Create a CodeIgniter controller and save as <strong>world.php</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;?php\nclass World extends Controller {\n\n    function World()\n    {\n        parent::Controller();\n    }\n\n    function index($continent = NULL)\n    {\n        // Set continents data.  In a real application we\n        // would obtain this from a database via a model.\n        $data[&#39;continents&#39;] = array(\n                1 =&gt; &#39;Europe&#39;,\n                2 =&gt; &#39;Africa&#39;,\n                3 =&gt; &#39;North America&#39;,\n            );\n\n        // If a non-Ajax continent selection is made, call the\n        // list_countries method, and set countries data.\n        if (isset($continent))\n        {\n            $data[&#39;countries&#39;] = $this-&gt;list_countries($continent);\n        }\n\n        // Load world view.\n        $this-&gt;load-&gt;view(&#39;world_view&#39;, $data);\n    }\n\n    function list_countries($continent)\n    {\n        // Generated countries data.  As before, this would be\n        // obtained from a model.\n        $continents = array(\n                1 =&gt; array(&#39;UK&#39;, &#39;France&#39;, &#39;Germany&#39;),\n                2 =&gt; array(&#39;South Africa&#39;, &#39;Zimbabwe&#39;, &#39;Cameroon&#39;),\n                3 =&gt; array(&#39;USA&#39;, &#39;Canada&#39;),\n            );\n\n        // Decide whether to return JSON data, or an array,\n        // depending if $_POST[&#39;ajax&#39;] is set.\n        if (isset($_POST[&#39;ajax&#39;]))\n        {\n            echo json_encode($continents[$continent]);\n        }\n        else\n        {\n            return $continents[$continent];\n        }\n    }\n}\n?&gt;</code></pre>\n<p>Create a view and save as <strong>world_view.php</strong>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;World example&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    function list_countries(id) {\n        $(&#39;li &gt; ul&#39;).slideUp(&#39;slow&#39;);\n\n        if ($(&#39;#id_&#39; + id).children(&#39;ul&#39;).length == 0) {\n            $.post(&#39;/world/list_countries/&#39; + id, {ajax:&#39;true&#39;},\n                function(data){\n                    unorderedlist = $(&#39;&lt;ul/&gt;&#39;).css(&#39;display&#39;, &#39;none&#39;);\n\n                    $.each(data, function(i, country){\n                        $(&#39;&lt;li/&gt;&#39;).text(country).appendTo(unorderedlist);\n                    });\n\n                    unorderedlist.appendTo(&#39;#id_&#39; + id);\n                    unorderedlist.slideDown(&#39;slow&#39;);\n                }, &#39;json&#39;);\t\n        } else {\n            $(&#39;#id_&#39; + id + &#39; &gt; ul&#39;).slideDown(&#39;slow&#39;);\n        }\n\n        return false;\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;ul&gt;\n    &lt;?php foreach($continents as $id =&gt; $name):?&gt;\n    &lt;li id=&quot;id_&lt;?=$id;?&gt;&quot;&gt;&lt;a onclick=&quot;return list_countries(&lt;?=$id;?&gt;);&quot; href=&quot;&lt;?=site_url(&quot;/world/index/$id&quot;);?&gt;&quot; title=&quot;Show countries in &lt;?=$name;?&gt;&quot;&gt;&lt;?=$name;?&gt;&lt;/a&gt;\n    &lt;?php if ($id == $this-&gt;uri-&gt;segment(3)):?&gt;\n    &lt;ul&gt;\n        &lt;?php foreach($countries as $country):?&gt;\n        &lt;li&gt;&lt;?=$country;?&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;?php endforeach;?&gt;\n    &lt;/ul&gt;&lt;/li&gt;\n    &lt;?php endif;?&gt;\n    &lt;?php endforeach;?&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>I just noticed that my ISP only has PHP4 installed. If this is the case for you, you will have to alter the controller to get this to work. Change the line:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;a href=&quot;http://www.php.net/echo&quot;&gt;echo&lt;/a&gt; json_encode($continents[$continent]);</code></pre>\n<p>To:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;a href=&quot;http://www.php.net/echo&quot;&gt;echo&lt;/a&gt; &#39;[&quot;&#39; . &lt;a href=&quot;http://www.php.net/implode&quot;&gt;implode&lt;/a&gt;(&#39;&quot;,&quot;&#39;, $continents[$continent]) . &#39;&quot;]&#39;;</code></pre>\n<p>Obviously this solution does not scale well for more complex data structures. I would advise using a JSON serializer library of some description. You could also create a view for the JSON structures, and pass data to that. This would actually be a sensible approach, as you would have complete control over the output.</p>\n"}}]}}},"context":{}}