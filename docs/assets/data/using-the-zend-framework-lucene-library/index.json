{"hash":"3abed4817c87332b7256cc04f5102649b2af0839","data":{"post":{"title":"Using the Zend framework Lucene library","path":"/using-the-zend-framework-lucene-library/","date":"23. May 2008","timeToRead":2,"tags":[{"id":"CodeIgniter","title":"CodeIgniter","path":"/tag/CodeIgniter/"},{"id":"PHP","title":"PHP","path":"/tag/PHP/"}],"description":"I know, only a few articles in, so I don't really need a site search function. But you never know, I might actually keep writing (even if no-one is reading) and so I've been looking around for some solutions.","content":"<p>I know, only a few articles in, so I don't really need a site search function. But you never know, I might actually keep writing (even if no-one is reading) and so I've been looking around for some solutions.</p>\n<p>I've looked at a few, for example: <a href=\"http://www.swish-e.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swish-e</a>, and <a href=\"http://www.sphider.eu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sphider</a>. Nothing really float my boat, until I had a look at the Zend Framework. It's another MVC based PHP framework, though it looks a little heavier than CodeIgniter. The documentation is not as good either, but it did have a Lucene library.</p>\n<p>I found a way of incorporating a Zend framework class as a CodeIgniter library here by Fred Wu. Nice work Fred, thanks.</p>\n<p>As Fred suggests, copy the Zend folder from the framework library to application/libraries/ in your CodeIgniter installation. I discovered that I only needed the Zend/Search folder, and the Zend/Exception.php file.</p>\n<p>Continuing Fred's instructions, create a Zend.php library file with the code posted on his blog page. Now we can get started.</p>\n<p>Create a directory for the index. In my example code I created a directory called application/search. Now we can create a controller called search.php that will contain some simple create, and search methods:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;?php\nclass Search extends MY_Controller {\n\n    function Search()\n    {\n        parent::MY_Controller();\n\n        $this-&gt;load-&gt;library(&#39;zend&#39;);\n        $this-&gt;zend-&gt;load(&#39;Zend/Search/Lucene&#39;); \n    }\n\n    function create()\n    {\n        // This method should be authenticated, or removed once the index is created.\n        // TODO: Some sort of site spidering process to add the entire site to the index.\n\n        $index = Zend_Search_Lucene::create(APPPATH . &#39;search/index&#39;);\n\n            $doc = Zend_Search_Lucene_Document_Html::loadHTMLFile(&#39;http://www.andrewrowland.com&#39;);\n\n            $index-&gt;addDocument($doc);\n\n        echo &#39;&lt;p&gt;Index created&lt;/p&gt;&#39;;\n    }\n\n    function index()\n    {\n        // TODO: Create an index method that contains a search form.\n    }\n\n    function result()\n    {\n        // Hardcoded search result example.\n        // TODO: Take a user search query, and expand the result summary\n\n        $index = Zend_Search_Lucene::open(APPPATH . &#39;search/index&#39;);\n\n        $data[&#39;results&#39;] = $index-&gt;find(&#39;andrew&#39;);\n\n        $this-&gt;load-&gt;view(&#39;search_result_view&#39;, $data);\t\t\n    }\n}\n?&gt;</code></pre>\n<p>I didn't bother with the create index view, as all that is needed is a simple message explaining that the index is created. The search_result_view.php view will display the results:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Search example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n    &lt;?php foreach($results as $result):?&gt;\n    &lt;li&gt;&lt;?php echo $result-&gt;title;?&gt;&lt;/li&gt;\n    &lt;?php endforeach;?&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>As you can see, I've noted a few TODO's. Might add a bit of jQuery action (because I'm worth it) in there to. Weekend coming up, so I'll expand on this next week.</p>\n","cover_image":null}},"context":{}}